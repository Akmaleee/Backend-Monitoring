// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"it-backend/database"
	"it-backend/internal/controller"
	"it-backend/internal/helper"
	"it-backend/internal/repository"
	"it-backend/internal/service"
	"github.com/gofiber/fiber/v2"
)

// Injectors from injector.go:

func InitDependency(config *helper.Config) *Dependency {
	databaseMySQL := database.NewDatabaseMySQL(config)
	authRepositoryImpl := repository.NewAuthRepository(databaseMySQL)
	authServiceImpl := service.NewAuthService(authRepositoryImpl)
	authControllerImpl := controller.NewAuthController(authServiceImpl)
	bareMetalRepositoryImpl := repository.NewBareMetalRepository(databaseMySQL)
	bareMetalServiceImpl := service.NewBareMetalService(bareMetalRepositoryImpl)
	bareMetalControllerImpl := controller.NewBareMetalController(bareMetalServiceImpl, authServiceImpl)
	virtualMachineRepositoryImpl := repository.NewVirtualMachineRepository(databaseMySQL)
	virtualMachineServiceImpl := service.NewVirtualMachineService(virtualMachineRepositoryImpl)
	virtualMachineControllerImpl := controller.NewVirtualMachineController(virtualMachineServiceImpl, authServiceImpl)
	dependency := &Dependency{
		Database:       databaseMySQL,
		AuthController: authControllerImpl,
		BareMetalController: bareMetalControllerImpl,
		VirtualMachineController: virtualMachineControllerImpl,
	}
	return dependency
}

// injector.go:

type Dependency struct {
	Database database.DatabaseMySQL

	AuthController controller.AuthController
	BareMetalController controller.BareMetalController
	VirtualMachineController controller.VirtualMachineController
}

func (d *Dependency) HealthCheck(ctx *fiber.Ctx) error {
	return ctx.JSON(fiber.Map{
		"message": "OK",
	})
}
